# SIMPLE-DIJS

Simple Javascript Dependency Injection Container (DI) like Pimple, well tested browser/node - ES6 Arrow Functions compatible

NOTE : this is V2. The V2 doesn't support callback anymore and can broke compatibity with old node versions in the future. Please use the v1 if you need to use callbacks or old node version.

[![npm](https://img.shields.io/github/issues-raw/gallofeliz/simple-dijs/bug.svg?label=bugs)](https://github.com/gallofeliz/simple-dijs/issues?q=is%3Aopen+is%3Aissue+label%3Abug)
[![npm](https://img.shields.io/npm/dm/simple-dijs.svg)](http://www.npm-stats.com/~packages/simple-dijs)

## Installation

- You can install from NPM

```bash
    npm install --save simple-dijs
```

- from github releases https://github.com/gallofeliz/simple-dijs/releases/latest (downloads)

## Integration

```javascript
    // NodeJs
    var Di = require('simple-dijs');
    // Web (just an example)
    ln -s node_modules/simple-dijs/dist/di.js public/lib/di.js
    // And minified : Only 4 K !
    ln -s node_modules/simple-dijs/dist/di.min.js public/lib/di.min.js
```

```html
    <!-- Available global or ADM (requirejs), thanks to Browserify -->
    <script src="lib/di.js" type="text/javascript"></script>
    <!-- Exists di.min.js -->
    <script src="lib/di.min.js" type="text/javascript"></script>
```

## Examples to use

```javascript
    // Simple instanciation
    var di = new Di();
    // Also instanciation with services
    new Di({
        'database': function () { ... },
        'userCollection': function (di) { ... }
    });

    di.set('database', function () {
        return new Database();
    });

    di.set('userCollection', function (di) {
        return new UserCollection(di.get('database'));
    });

    // Or multiple services
    di.batchSet({ ..same than construct.. });

    // So, ...
    di.get('userCollection').find(1); // UserCollection instanciated now !
    di.get('userCollection').find(1); // The same UserCollection instance

    // If you want to factory instead of return the same object :
    di.set('userCollection', di.factory(function (di) {
        return new UserCollection(di.get('database'));
    }));

    // So, ...
    di.get('userCollection').find(1); // UserCollection instanciated now !
    di.get('userCollection').find(1); // Other UserCollection instance now, instanciated now !

    // You can store raw values
    di.set('port', 80);
    di.get('port'); // 80

    // Protect function you want to register raw :
    di.set('math.add', di.protected(function (a, b) {
        return a + b;
    }));

    // New feature in v2 ! You can inject your dependencies in arguments

    di.set('database', function (config, logger) { // You have declared config and logger
        return new Database(config.database, logger);
    });

    // Or with ES6 Arrow Functions

    di.set('database', (config, logger) => new Database(config.database, logger) });

    // You cannot use callbacks anymore. Please see version 1.x

    // You can use promise (native or not)

    di.set('async', function () {
        return new Promise(/*Blabla*/);
    });

    di.get('async').then(function () {
        // ...
    });

    // You can chain the methods calls
    (new Di()).set(...).set(...);
```

## Quality and license

- A complete build is configured. Always green before release
- Tests are written before code (TDD) : The what before the how
- Uses the http://semver.org/ versionning
- Please **report issues** and suggestions https://github.com/gallofeliz/simple-dijs/issues
- Please **watch** the github project if you **use** [![GitHub watchers](https://img.shields.io/github/watchers/gallofeliz/simple-dijs.svg?style=social&label=Watch)](https://github.com/gallofeliz/simple-dijs)
- Please **star** the github project if you **like** [![GitHub stars](https://img.shields.io/github/stars/gallofeliz/simple-dijs.svg?style=social&label=Star)](https://github.com/gallofeliz/simple-dijs)

## API Reference
{{>main}}
