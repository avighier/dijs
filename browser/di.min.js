!function(f){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=f();else if("function"==typeof define&&define.amd)define([],f);else{var g;g="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,g.Di=f()}}(function(){return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a="function"==typeof require&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){var assert=function(condition,errorMessage){if(!condition)throw new Error(errorMessage)},Di=function(values){this._definitions={},this._factory=[],values&&this.batchSet(values)};Di.prototype={batchSet:function(values){var that=this;return assert(arguments.length>=1,"One argument required"),assert("object"==typeof values&&null!==values,"Expected argument values to be Object"),Object.keys(values).forEach(function(id){that.set(id,values[id])}),this},has:function(id){return"undefined"!=typeof this._definitions[id]},set:function(id,funcOrValue){assert(arguments.length>=2,"Two arguments required"),assert("string"==typeof id,"Expected string id"),assert(this.has(id)===!1,'Identifier "%s" already defined'.replace("%s",id));var isFunction="function"==typeof funcOrValue,isInFactory=isFunction&&this._factory.indexOf(funcOrValue)!==-1;return this._definitions[id]=isFunction?{func:isInFactory?funcOrValue:this._single(funcOrValue)}:{value:funcOrValue},isInFactory&&this._factory.splice(this._factory.indexOf(funcOrValue),1),this},get:function(id){assert(arguments.length>=1,"One argument required"),assert("string"==typeof id,"Expected string id"),assert(this.has(id)===!0,'Identifier "%s" is not defined'.replace("%s",id));var definition=this._definitions[id],hasValue=Object.keys(definition).indexOf("value")!==-1;return hasValue?definition.value:definition.func(this)},factory:function(func){return assert(arguments.length>=1,"One argument required"),assert("function"==typeof func,"Expected function func"),this._factory.push(func),func},keys:function(){return Object.keys(this._definitions)},_single:function(func){return function(di){return this.value=func(di),this.value}}},Di.prototype.register=Di.prototype.set,module.exports=Di},{}]},{},[1])(1)});